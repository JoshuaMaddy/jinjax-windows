{"docs": [{"id": "1", "title": "JinjaX", "body": "<p>   <img>  JinjaX", "parent": "", "loc": "/#"}, {"id": "2", "title": "JinjaX", "body": "Super  components powers  for your  Jinja templates", "parent": "", "loc": "/#"}, {"id": "3", "title": "JinjaX", "body": "Before: chaos!", "parent": "", "loc": "/#"}, {"id": "4", "title": "JinjaX", "body": "<pre><code>{% extends &quot;layout.html&quot; %}\n\n{% block title %}\n  My title\n{% endblock %}\n\n{% from &quot;bunch_of_macros.html&quot;\n  import card_macro, another_macro %}\n\n{% block content -%}\n  &lt;div&gt;\n    &lt;h2&gt;Hello {{ mistery or &quot;World?&quot; }}&lt;/h2&gt;\n    &lt;div&gt;\n      {% call card_macro(header=&quot;So verbose&quot;) %}\n        {% for product in products %}\n          {{ another_macro(product) }}\n        {% endfor %}\n      {% endcall %}\n    &lt;/div&gt;\n  &lt;/div&gt;\n  {% with items=products %}\n    {% include &quot;snippets/pagination.html&quot; %}\n  {% endwith %}\n{%- endblock %}\n</code></pre>", "parent": "", "loc": "/#"}, {"id": "5", "title": "JinjaX", "body": "After: \u2728 clarity \u2728", "parent": "", "loc": "/#"}, {"id": "6", "title": "JinjaX", "body": "<pre><code>{#def products, msg=&quot;World!&quot; #}\n\n&lt;Layout title=&quot;My title&quot;&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Hello, {{ msg }}&lt;/h2&gt;\n    &lt;div&gt;\n      &lt;Card header=&quot;So clean&quot;&gt;\n        {% for product in products %}\n          &lt;Product product={product} /&gt;\n        {% endfor %}\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;Paginator items={products} /&gt;\n&lt;/Layout&gt;\n</code></pre>", "parent": "", "loc": "/#"}, {"id": "7", "title": "JinjaX", "body": "Better than <code>include</code> and <code>macros</code>", "parent": "", "loc": "/#"}, {"id": "8", "title": "JinjaX", "body": "<img></img>  Encapsulated", "parent": "", "loc": "/#"}, {"id": "9", "title": "JinjaX", "body": "Link to their own <code>css</code> and/or <code>js</code> files and can be copy/pasted to other projects without modifications.", "parent": "", "loc": "/#"}, {"id": "10", "title": "JinjaX", "body": "<img></img>  Simple", "parent": "", "loc": "/#"}, {"id": "11", "title": "JinjaX", "body": "Just regular Jinja files and no need to import them. Easier to use and easier to read.", "parent": "", "loc": "/#"}, {"id": "12", "title": "JinjaX", "body": "<img></img>  Modern", "parent": "", "loc": "/#"}, {"id": "13", "title": "JinjaX", "body": "Components works great with htmx, TailwindCSS, or Hotwire", "parent": "", "loc": "/#"}, {"id": "14", "title": "JinjaX", "body": "<img></img>  Composable", "parent": "", "loc": "/#"}, {"id": "15", "title": "JinjaX", "body": "Can wrap content (HTML, other components, etc.) in a natural way.", "parent": "", "loc": "/#"}, {"id": "16", "title": "JinjaX", "body": "Say goodbye to spaghetti templates", "parent": "", "loc": "/#"}, {"id": "17", "title": "JinjaX", "body": "<img></img> <p> Your Python code should be easy to understand and test. </p>", "parent": "", "loc": "/#"}, {"id": "18", "title": "JinjaX", "body": "<p> <b>Template code, however, often fails even basic code standards</b>: long methods, deep conditional nesting, and mystery variables everywhere. </p>", "parent": "", "loc": "/#"}, {"id": "19", "title": "JinjaX", "body": "<p> <b>But when it's built with components, you see</b> where everything is, understand what are the possible states of every piece of UI, and know exactly what data need to have. </p>", "parent": "", "loc": "/#"}, {"id": "20", "title": "JinjaX", "body": "<p> You can replace <b>all</b> your templates with components, or start with one section. </p>", "parent": "", "loc": "/#"}, {"id": "21", "title": "JinjaX", "body": "Ready to get going? Engage!   Get started \u27f6", "parent": "", "loc": "/#"}, {"id": "22", "title": "JinjaX", "body": "Millions of people clicked a button in the last week alone!  </p>", "parent": "", "loc": "/#"}, {"id": "1", "title": "Installation\u00b6", "body": "<p>Install the package using <code>pip</code>.</p>", "parent": "Quickstart", "loc": "/guide/#installation"}, {"id": "2", "title": "Installation\u00b6", "body": "<pre><code>pip install jinjax\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#installation"}, {"id": "3", "title": "Usage\u00b6", "body": "<p>The first thing you must do in your app is to create a \"catalog\" of components. This is the object that manage the components and its global settings. Then, you add to the catalog the folder(s) with your components.</p>", "parent": "Quickstart", "loc": "/guide/#usage"}, {"id": "4", "title": "Usage\u00b6", "body": "<pre><code>from jinjax import Catalog\n\ncatalog = Catalog()\ncatalog.add_folder(&quot;myapp/components&quot;)\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#usage"}, {"id": "5", "title": "Usage\u00b6", "body": "<p>You use the catalog to render a parent component from your views:</p>", "parent": "Quickstart", "loc": "/guide/#usage"}, {"id": "6", "title": "Usage\u00b6", "body": "<pre><code>def myview():\n  ...\n  return catalog.render(\n    &quot;ComponentName&quot;,\n    title=&quot;Lorem ipsum&quot;,\n    message=&quot;Hello&quot;,\n  )\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#usage"}, {"id": "7", "title": "Components\u00b6", "body": "<p>The components are <code>.jinja</code> files with snippets of template code (HTML or otherwise). They can also call other components.</p>", "parent": "Quickstart", "loc": "/guide/#components"}, {"id": "8", "title": "Components names\u00b6", "body": "<p>The components <strong>must</strong> start with an uppercase. I recommend that you use PascalCase names, like Python classes.</p>", "parent": "Quickstart", "loc": "/guide/#components-names"}, {"id": "9", "title": "Components names\u00b6", "body": "<p>For example, if the filename es <code>PersonForm.jinja</code>, the name of the component is <code>PersonForm</code> and can be used like <code>&lt;PersonForm&gt; ... &lt;/PersonForm&gt;</code> or just <code>&lt;PersonForm /&gt;</code>.</p>", "parent": "Quickstart", "loc": "/guide/#components-names"}, {"id": "10", "title": "Components names\u00b6", "body": "<p>You can organize your components in subfolders, using a dot (<code>.</code>) to indicate a subfolder. For example, you would call a <code>components/Person/Form.jinja</code> components as <code>&lt;Person.Form&gt; ... &lt;/Person.Form&gt;</code></p>", "parent": "Quickstart", "loc": "/guide/#components-names"}, {"id": "11", "title": "Components arguments\u00b6", "body": "<p>A component can only use data you pass it explicitly and global variables. To declare what arguments it takes, begin the file with a <code>{#def ... #}</code> Jinja comment. Some of these arguments might have a default value (making them optional):</p>", "parent": "Quickstart", "loc": "/guide/#components-arguments"}, {"id": "12", "title": "Components arguments\u00b6", "body": "<pre><code>{#def title, message=&#x27;Hi&#x27; #}\n\n&lt;h1&gt;{{ title }}&lt;/h1&gt;\n&lt;div&gt;{{ message }}. This is my component&lt;/div&gt;\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#components-arguments"}, {"id": "13", "title": "Jinja\u00b6", "body": "<p>JinjaX use Jinja internally to render the templates. You can add your own global variables and functions, filters, tests, and Jinja extensions when creating the catalog:</p>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "14", "title": "Jinja\u00b6", "body": "<pre><code>from jinjax import Catalog\n\ncatalog = Catalog(\n    globals={ ... },\n    filters={ ... },\n    tests={ ... },\n    extensions=[ ... ],\n)\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "15", "title": "Jinja\u00b6", "body": "<p>or afterwards.</p>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "16", "title": "Jinja\u00b6", "body": "<pre><code>catalog.jinja_env.globals.update({ ... })\ncatalog.jinja_env.filters.update({ ... })\ncatalog.jinja_env.tests.update({ ... })\ncatalog.jinja_env.extensions.extend([ ... ])\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "17", "title": "Jinja\u00b6", "body": "<p>You can also reuse an existing Jinja Environment, for example, the one from <strong>Flask</strong>:</p>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "18", "title": "Jinja\u00b6", "body": "<pre><code>app = Flask(__name__)\n\n# Here we add the flask Jinja globals, filters, etc. like `url_for()`\ncatalog = jinjax.Catalog(jinja_env=app.jinja_env)\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "19", "title": "Jinja\u00b6", "body": "<p>The \"do\" extension is enabled by default, so you can write things like:</p>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "20", "title": "Jinja\u00b6", "body": "<pre><code>{% do attrs.set(class=&quot;btn&quot;, disabled=True) %}\n</code></pre>", "parent": "Quickstart", "loc": "/guide/#jinja"}, {"id": "1", "title": "Components\u00b6", "body": "<p>The components are <code>.jinja</code> files with snippets of template code. They look like a fragment of a regular Jinja template \u2013 and they could be \u2013 except for the optional special comments at the beginning of the file.</p>", "parent": "Components", "loc": "/guide/components#components"}, {"id": "2", "title": "Component Arguments\u00b6", "body": "<p><img></p>  <p>More often than not, a component takes one or more arguments to render. Every argument must be declared at the beginning of the component with <code>{#def arguments #}</code>. The syntax is very similar to how you declare the arguments of a python function:</p>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "3", "title": "Component Arguments\u00b6", "body": "components/Form.jinja", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "4", "title": "Component Arguments\u00b6", "body": "<pre><code>{#def action, method=&#x27;post&#x27;, multipart=False #}\n\n&lt;form method=&quot;{{ method }}&quot; action=&quot;{{ action }}&quot;\n  {%- if multipart %} enctype=&quot;multipart/form-data&quot;{% endif %}\n&gt;\n  {{ content }}\n&lt;/form&gt;\n</code></pre>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "5", "title": "Component Arguments\u00b6", "body": "<p>In this example, the component takes three arguments: \"action\", \"method\", and \"multipart\". The last two have a default value, so they are optional, but the first one doesn't. That means it must be passed a value when rendering the component.</p>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "6", "title": "Component Arguments\u00b6", "body": "<p>So all of these are valid forms to use this component:</p>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "7", "title": "Component Arguments\u00b6", "body": "<pre><code>&lt;Form action=&quot;/new&quot;&gt; ... &lt;/Form&gt;\n&lt;Form action=&quot;/new&quot; method=&quot;PATCH&quot;&gt; ... &lt;/Form&gt;\n&lt;Form multipart={False} action=&quot;/new&quot;&gt; ... &lt;/Form&gt;\n</code></pre>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "8", "title": "Component Arguments\u00b6", "body": "<p>The values of the declared arguments can be used in the template as values with the same name.</p>", "parent": "Components", "loc": "/guide/components#component-arguments"}, {"id": "9", "title": "Components with content\u00b6", "body": "<p>There is actually always an extra implicit argument: the content inside the component. This could be anything: text, HTML, and/or other components; but the component recieves it already rendered to a string.</p>", "parent": "Components", "loc": "/guide/components#components-with-content"}, {"id": "10", "title": "Components with content\u00b6", "body": "<pre><code>{# Component with content #}\n&lt;Name _arguments_ &gt; ...content here... &lt;/Name&gt;\n\n{# Self-closing component, `content` is an empty string #}\n&lt;Name _arguments_ /&gt;\n</code></pre>", "parent": "Components", "loc": "/guide/components#components-with-content"}, {"id": "11", "title": "Components with content\u00b6", "body": "<p>A great use case of the <code>content</code> is to make layout components:</p>", "parent": "Components", "loc": "/guide/components#components-with-content"}, {"id": "1", "title": "Extra Arguments\u00b6", "body": "<p>If you pass arguments not declared in a component, those are not discarded, but rather collected in a <code>attrs</code> object that can render these extra arguments calling <code>attrs.render()</code></p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "2", "title": "Extra Arguments\u00b6", "body": "<p>For example, this component:</p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "3", "title": "Extra Arguments\u00b6", "body": "components/Card.jinja", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "4", "title": "Extra Arguments\u00b6", "body": "<pre><code>{#def title #}\n\n&lt;div {{ attrs.render() }}&gt;\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\n  {{ content }}\n&lt;/div&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "5", "title": "Extra Arguments\u00b6", "body": "<p>Called as:</p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "6", "title": "Extra Arguments\u00b6", "body": "<pre><code>&lt;Card title=&quot;Products&quot; class=&quot;mb-10&quot; open&gt;\nbla\n&lt;/Card&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "7", "title": "Extra Arguments\u00b6", "body": "<p>Will be rendered as:</p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "8", "title": "Extra Arguments\u00b6", "body": "<pre><code>&lt;div class=&quot;mb-10&quot; open&gt;\n  &lt;h1&gt;Products&lt;/h1&gt;\n  bla\n&lt;/div&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "9", "title": "Extra Arguments\u00b6", "body": "<p>You can add or remove arguments before rendering them using the other methods of the <code>attrs</code> object. For example:</p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "10", "title": "Extra Arguments\u00b6", "body": "<pre><code>{#def title #}\n\n{% do attrs.set(id=&quot;mycard&quot;) -%}\n\n&lt;div {{ attrs.render() }}&gt;\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\n  {{ content }}\n&lt;/div&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "11", "title": "Extra Arguments\u00b6", "body": "<p>Or directly in the <code>attrs.render()</code> call:</p>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "12", "title": "Extra Arguments\u00b6", "body": "<pre><code>{#def title #}\n\n&lt;div {{ attrs.render(id=&quot;mycard&quot;) }}&gt;\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\n  {{ content }}\n&lt;/div&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#extra-arguments"}, {"id": "13", "title": ".render(name=value, ...)\u00b6", "body": "</code> </code> <p>Renders the current attributes and properties as a string. Any attributes/properties you pass to this method, will be used to call <code>attrs.set(**kwargs)</code> before rendering.</p>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "14", "title": ".render(name=value, ...)\u00b6", "body": "<ul> <li>Pass a name and a value to set an attribute (e.g. <code>type=\"text\"</code>)</li> <li>Use <code>True</code> as value to set a property (e.g. <code>disabled</code>)</li> <li>Use <code>False</code> to remove an attribute or property</li> </ul>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "15", "title": ".render(name=value, ...)\u00b6", "body": "<p>The underscores in the names will be translated automatically to dashes, so <code>aria_selected</code> becomes the attribute <code>aria-selected</code>.</p>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "16", "title": ".render(name=value, ...)\u00b6", "body": "<p>The current attribute/property are overwritten <strong>except</strong> if is \"class\" or \"classes\". In those cases, the new classes are appended to the old ones instead of replacing them.</p>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "17", "title": ".render(name=value, ...)\u00b6", "body": "<p>To provide consistent output, the attributes and properties are sorted by name and rendered like this: <code>&lt;sorted attributes&gt; + &lt;sorted properties&gt;</code>.</p>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "18", "title": ".render(name=value, ...)\u00b6", "body": "<pre><code>&lt;button {{ attrs.render() }}&gt;\n  {{ content }}\n&lt;/button&gt;\n</code></pre>", "parent": "Extra Arguments", "loc": "/guide/extra#rendernamevalue"}, {"id": "1", "title": "Adding CSS and JS\u00b6", "body": "<p>Your components might need custom styles or custom JavaScript for many reasons. Instead of using global stylesheet or scripts files, writing assets per individual component has several advantages:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#adding-css-and-js"}, {"id": "2", "title": "Adding CSS and JS\u00b6", "body": "<ul> <li><strong>Portability</strong>: You can copy a component from one project to another knowing it will keep working as expected.</li> <li><strong>Performance</strong>: On each page, only load the css and js that you need. Also, the browser will already have cached the assets of the components for other pages that use them.</li> <li><strong>Simple testing</strong>: You can test the JS of a component indepently from others.</li> </ul>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#adding-css-and-js"}, {"id": "3", "title": "Declaring assets\u00b6", "body": "<p>The css and/or the js of a component must be declared in the metatada header with <code>{#css ... #}</code> and <code>{#js ... #}</code></p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#declaring-assets"}, {"id": "4", "title": "Declaring assets\u00b6", "body": "<pre><code>{#css lorem.css, ipsum.css #}\n{#js foo.js, bar.js #}\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#declaring-assets"}, {"id": "5", "title": "Declaring assets\u00b6", "body": "<ul> <li>The filepaths must be relative to the root of your components catalog (e.g.: <code>components/</code>).</li> <li>Multiple assets must be separated by commas.</li> <li>Only <strong>one</strong> and <strong>one</strong> tag is allowed per component at most, but both are optional.</li> </ul>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#declaring-assets"}, {"id": "6", "title": "Global assets\u00b6", "body": "<p>Best practice is to store both CSS and JS files of the component within the same folder. Doing that has several advantages, including easier component reuse in other projects, improved code readability, and simplified debugging.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "7", "title": "Global assets\u00b6", "body": "<p>However, there are instances when you may need to rely on global CSS or JS files, such as third-party libraries. In such cases, you can specify these dependencies in the component's metadata using URLs that start with either \"/\", \"http://,\" or \"https://.\"</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "8", "title": "Global assets\u00b6", "body": "<p>When you do this, JinjaX will render them as is; instead of prepending them with the component's prefix like it normally does.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "9", "title": "Global assets\u00b6", "body": "<p>For example, this code:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "10", "title": "Global assets\u00b6", "body": "<pre><code>{#css foo.css, bar.css, /static/bootstrap.min.css #}\n{#js http://example.com/cdn/moment.js, bar.js  #}\n\n{{ catalog.render_assets() }}\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "11", "title": "Global assets\u00b6", "body": "<p>will be render as this HTML output:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "12", "title": "Global assets\u00b6", "body": "<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/components/foo.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/components/bar.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/bootstrap.min.css&quot;&gt;\n&lt;script type=&quot;module&quot; src=&quot;http://example.com/cdn/moment.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;module&quot; src=&quot;/static/components/bar.js&quot;&gt;&lt;/script&gt;\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#global-assets"}, {"id": "13", "title": "Including assets in your pages\u00b6", "body": "<p>The catalog will collect all css and js file paths from the components used on a \"page\" render on the <code>catalog.collected_css</code> and <code>catalog.collected_js</code> lists.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "14", "title": "Including assets in your pages\u00b6", "body": "<p>For example, after rendering this component:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "15", "title": "Including assets in your pages\u00b6", "body": "components/MyPage.jinja", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "16", "title": "Including assets in your pages\u00b6", "body": "<pre><code>{#css mypage.css #}\n{#js mypage.js #}\n\n&lt;Layout title=&quot;My page&quot;&gt;\n  &lt;Card&gt;\n    &lt;CardBody&gt;\n      &lt;h1&gt;Lizard&lt;/h1&gt;\n      &lt;p&gt;The Iguana is a type of lizard&lt;/p&gt;\n    &lt;/CardBody&gt;\n    &lt;CardActions&gt;\n      &lt;Button size=&quot;small&quot;&gt;Share&lt;/Button&gt;\n    &lt;/CardActions&gt;\n  &lt;/Card&gt;\n&lt;/Layout&gt;\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "17", "title": "Including assets in your pages\u00b6", "body": "<p>Asuming the <code>Card</code>, and <code>Button</code> components declare css assests, this will the state of the <code>collected_css</code> list:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "18", "title": "Including assets in your pages\u00b6", "body": "<pre><code>catalog.collected_css\n[&#x27;mypage.css&#x27;, &#x27;card.css&#x27;, &#x27;button.css&#x27;]\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "19", "title": "Including assets in your pages\u00b6", "body": "<p>You can add the <code>&lt;link&gt;</code> and <code>&lt;script&gt;</code> tags in your page automatically by calling <code>catalog.render_assets()</code> like this:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "20", "title": "Including assets in your pages\u00b6", "body": "components/Layout.jinja", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "21", "title": "Including assets in your pages\u00b6", "body": "<pre><code>{#def title #}\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;{{ title }}&lt;/title&gt;\n  {{ catalog.render_assets() }}\n&lt;/head&gt;\n&lt;body&gt;\n  {{ content }}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "22", "title": "Including assets in your pages\u00b6", "body": "<p>The variable will be rendered as:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "23", "title": "Including assets in your pages\u00b6", "body": "<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/components/mypage.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/components/card.css&quot;&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/components/button.css&quot;&gt;\n&lt;script type=&quot;module&quot; src=&quot;/static/components/mypage.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;module&quot; src=&quot;/static/components/card.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;module&quot; src=&quot;/static/components/button.js&quot;&gt;&lt;/script&gt;\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#including-assets-in-your-pages"}, {"id": "24", "title": "Middleware\u00b6", "body": "<p>The tags above will not work at all if your application can't return the content of those files, and right now it can't.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "25", "title": "Middleware\u00b6", "body": "<p>For that reason, JinjaX include a WSGI middleware that will process those URLs if you add it to your application.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "26", "title": "Middleware\u00b6", "body": "<pre><code>from flask import Flask\nfrom jinjax import Catalog\n\napp = Flask(__name__)\n\n# Here we add the flask Jinja globals, filters, etc. like `url_for()`\ncatalog = jinjax.Catalog(jinja_env=app.jinja_env)\n\ncatalog.add_folder(&quot;myapp/components&quot;)\n\napp.wsgi_app = catalog.get_middleware(\n    app.wsgi_app,\n    autorefresh=app.debug,\n)\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "27", "title": "Middleware\u00b6", "body": "<p>The middleware uses the battle-tested Whitenoise library and it will only respond to the <em>.css</em> and <em>.js</em> files inside the component(s) folder(s). You can configure it to also return files with other extensions. For example:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "28", "title": "Middleware\u00b6", "body": "<pre><code>catalog.get_middleware(app, allowed_ext=[&quot;.css&quot;, &quot;.js&quot;, &quot;.svg&quot;, &quot;.png&quot;])\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "29", "title": "Middleware\u00b6", "body": "<p>Be aware that, if you use this option, <code>get_middleware()</code> must be called <strong>after</strong> all folders are added.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#middleware"}, {"id": "30", "title": "CSS Scoping\u00b6", "body": "<p>The styles of your components will not be auto-scoped. This means the styles of a component can affect other components, and, likewise, it will be affected by global styles or the styles of other components.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "31", "title": "CSS Scoping\u00b6", "body": "<p>To protect yourself against that, <em>always</em> add a custom class to the root element(s) of your component and use it to scope the rest of the component styles. Example:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "32", "title": "CSS Scoping\u00b6", "body": "components/Card.jinja", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "33", "title": "CSS Scoping\u00b6", "body": "<pre><code>{#css card.css #}\n\n&lt;div {{ attrs.render(class=&quot;Card&quot;) }}&gt;\n  &lt;h1&gt;My Card&lt;/h1&gt;\n  ...\n&lt;/div&gt;\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "34", "title": "CSS Scoping\u00b6", "body": "components/card.css", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "35", "title": "CSS Scoping\u00b6", "body": "<pre><code>/* \ud83d\udeab DO NOT do this */\nh1 { font-size: 2em; }\nh2 { font-size: 1.5em; }\na { color: blue; }\n\n/* \ud83d\udc4d DO THIS instead */\n.Card h1 { font-size: 2em; }\n.Card h2 { font-size: 1.5em; }\n.Card a { color: blue; }\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "36", "title": "CSS Scoping\u00b6", "body": "<p>Always use a class instead of an <code>id</code>, or the component will not be usable more than once per page.</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#css-scoping"}, {"id": "37", "title": "JS events\u00b6", "body": "<p>Your components might be inserted in the page on-the fly, after the JavaScript files has been loaded and executed. So, attaching events to the elements on the page on load will not be enough:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}, {"id": "38", "title": "JS events\u00b6", "body": "components/card.js", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}, {"id": "39", "title": "JS events\u00b6", "body": "<pre><code>// This will fail for any Card component inserted after page load\ndocument.querySelectorAll(&#x27;.Card button.share&#x27;)\n  .forEach( (node) =&gt; {\n    node.addEventListener(&quot;click&quot;, handleClick)\n  })\n\n/* ... etc ... */\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}, {"id": "40", "title": "JS events\u00b6", "body": "<p>A solution can be using event delegation:</p>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}, {"id": "41", "title": "JS events\u00b6", "body": "components/card.js", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}, {"id": "42", "title": "JS events\u00b6", "body": "<pre><code>// This will work for any Card component inserted after page load\ndocument.addEventListener(&quot;click&quot;, (event) =&gt; {\n  if (event.target.matches(&quot;.Card button.share&quot;)) {\n    handleClick(event)\n  }\n})\n</code></pre>", "parent": "Adding CSS and JS", "loc": "/guide/css-and-js#js-events"}], "index": {"version": "2.3.9", "fields": ["title", "body"], "fieldVectors": [["title/undefined", []], ["body/undefined", []]], "invertedIndex": [], "pipeline": ["stemmer"]}}